{
	"info": {
		"_postman_id": "2f88b67f-0896-4b76-b52b-f803fc111031",
		"name": "features",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Добавление нового пользователя 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test1@practicummail.ru\"').to.eql('user.test1@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 1\"').to.eql('Test User 1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test1@practicummail.ru\",\r\n    \"name\": \"Test User 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test2@practicummail.ru\"').to.eql('user.test2@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 2\"').to.eql('Test User 2');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test2@practicummail.ru\",\r\n    \"name\": \"Test User 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test3@practicummail.ru\"').to.eql('user.test3@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 3\"').to.eql('Test User 3');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test3@practicummail.ru\",\r\n    \"name\": \"Test User 3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test4@practicummail.ru\"').to.eql('user.test4@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 4\"').to.eql('Test User 4');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test4@practicummail.ru\",\r\n    \"name\": \"Test User 4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test5@practicummail.ru\"').to.eql('user.test5@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 5\"').to.eql('Test User 5');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test5@practicummail.ru\",\r\n    \"name\": \"Test User 5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test6@practicummail.ru\"').to.eql('user.test6@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 6\"').to.eql('Test User 6');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test6@practicummail.ru\",\r\n    \"name\": \"Test User 6\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 7').to.eql(7);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test7@practicummail.ru\"').to.eql('user.test7@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 7\"').to.eql('Test User 7');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test7@practicummail.ru\",\r\n    \"name\": \"Test User 7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 8').to.eql(8);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test8@practicummail.ru\"').to.eql('user.test8@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 8\"').to.eql('Test User 8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test8@practicummail.ru\",\r\n    \"name\": \"Test User 8\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 9').to.eql(9);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test9@practicummail.ru\"').to.eql('user.test9@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 9\"').to.eql('Test User 9');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test9@practicummail.ru\",\r\n    \"name\": \"Test User 9\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 10').to.eql(10);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test10@practicummail.ru\"').to.eql('user.test10@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 10\"').to.eql('Test User 10');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test10@practicummail.ru\",\r\n    \"name\": \"Test User 10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 11').to.eql(11);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test11@practicummail.ru\"').to.eql('user.test11@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 11\"').to.eql('Test User 11');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test11@practicummail.ru\",\r\n    \"name\": \"Test User 11\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 12').to.eql(12);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test12@practicummail.ru\"').to.eql('user.test12@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 12\"').to.eql('Test User 12');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test12@practicummail.ru\",\r\n    \"name\": \"Test User 12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 13",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 13').to.eql(13);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test13@practicummail.ru\"').to.eql('user.test13@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 13\"').to.eql('Test User 13');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test13@practicummail.ru\",\r\n    \"name\": \"Test User 13\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 14",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 14').to.eql(14);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.test14@practicummail.ru\"').to.eql('user.test14@practicummail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test User 14\"').to.eql('Test User 14');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user.test14@practicummail.ru\",\r\n    \"name\": \"Test User 14\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Добавление новой категории 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test category name 1\"').to.eql('Test category name 1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test category name 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой категории 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test category name 2\"').to.eql('Test category name 2');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test category name 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой категории 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test category name 3\"').to.eql('Test category name 3');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test category name 3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой категории 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Test category name 4\"').to.eql('Test category name 4');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Test category name 4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Добавление нового события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title, '\"title\" must be \"test_title_1\"').to.eql('test_title_1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"test_annotation_1_123456789\",\r\n  \"category\": 1,\r\n  \"description\": \"test_description_1_123456789\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"test_title_1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title, '\"title\" must be \"test_title_2\"').to.eql('test_title_2');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"test_annotation_2_123456789\",\r\n  \"category\": 1,\r\n  \"description\": \"test_description_2_123456789\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"test_title_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test user 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title, '\"title\" must be \"test_title_3\"').to.eql('test_title_3');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"test_annotation_3_123456789\",\r\n  \"category\": 3,\r\n  \"description\": \"test_description_3_123456789\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"test_title_3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактирование статуса события 1 (публикация)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"state\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1",
									"description": "(Required) id события"
								}
							]
						},
						"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
					},
					"response": []
				},
				{
					"name": "Редактирование статуса события 2 (публикация)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"state\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2",
									"description": "(Required) id события"
								}
							]
						},
						"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
					},
					"response": []
				}
			]
		},
		{
			"name": "Likes",
			"item": [
				{
					"name": "evaluateEvent eventId = 1 userId = 1 default grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 2 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(409);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 3 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 4 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 5 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 6 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 6').to.eql(6);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 7 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 7').to.eql(7);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 8 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 8').to.eql(8);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 9 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 9').to.eql(9);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 10 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 10').to.eql(10);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 1 userId = 11 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 11').to.eql(11);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 1 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 2 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 3 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 4 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 5 with grade (LIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 6 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 6').to.eql(6);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 7 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 7').to.eql(7);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 8 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 8').to.eql(8);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent eventId = 2 userId = 9 with grade (DISLIKE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 9').to.eql(9);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('grade');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								},
								{
									"key": "userId",
									"value": "9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventLikes ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like[0] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like[1] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test like[2] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('user');\r",
									"    pm.expect(jsonData[2].user.id, '\"user.id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test like[3] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3]).to.have.property('user');\r",
									"    pm.expect(jsonData[3].user.id, '\"user.id\" must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test like[4] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4]).to.have.property('user');\r",
									"    pm.expect(jsonData[4].user.id, '\"user.id\" must be 6').to.eql(6);\r",
									"});\r",
									"pm.test(\"Test like[5] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[5]).to.have.property('user');\r",
									"    pm.expect(jsonData[5].user.id, '\"user.id\" must be 7').to.eql(7);\r",
									"});\r",
									"pm.test(\"Test like[6] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[6]).to.have.property('user');\r",
									"    pm.expect(jsonData[6].user.id, '\"user.id\" must be 8').to.eql(8);\r",
									"});\r",
									"pm.test(\"Test like[7] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[7]).to.have.property('user');\r",
									"    pm.expect(jsonData[7].user.id, '\"user.id\" must be 9').to.eql(9);\r",
									"});\r",
									"pm.test(\"Test like[8] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[8]).to.have.property('user');\r",
									"    pm.expect(jsonData[8].user.id, '\"user.id\" must be 10').to.eql(10);\r",
									"});\r",
									"pm.test(\"Test like[9] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9]).to.have.property('user');\r",
									"    pm.expect(jsonData[9].user.id, '\"user.id\" must be 11').to.eql(11);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId?queryType=ALL&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "queryType",
									"value": "ALL"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserLikes ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like[0] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like[1] 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like[0] 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like[1] 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test like[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 11').to.eql(11);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/likes/users/:userId?queryType=ALL&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "queryType",
									"value": "ALL"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventLikes LIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[0] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\" must be 3').to.eql(3);\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[1] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\" must be 4').to.eql(4);\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[2] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2]).to.have.property('user');\r",
									"    pm.expect(jsonData[2]).to.have.property('event');\r",
									"\r",
									"    pm.expect(jsonData[2].id, '\"id\" must be 7').to.eql(7);\r",
									"    pm.expect(jsonData[2].user.id, '\"user.id\" must be 8').to.eql(8);\r",
									"    pm.expect(jsonData[2].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[3] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3]).to.have.property('id');\r",
									"    pm.expect(jsonData[3]).to.have.property('user');\r",
									"    pm.expect(jsonData[3]).to.have.property('event');\r",
									"\r",
									"    pm.expect(jsonData[3].id, '\"id\" must be 8').to.eql(8);\r",
									"    pm.expect(jsonData[3].user.id, '\"user.id\" must be 9').to.eql(9);\r",
									"    pm.expect(jsonData[3].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[4] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4]).to.have.property('id');\r",
									"    pm.expect(jsonData[4]).to.have.property('user');\r",
									"    pm.expect(jsonData[4]).to.have.property('event');\r",
									"\r",
									"    pm.expect(jsonData[4].id, '\"id\" must be 9').to.eql(9);\r",
									"    pm.expect(jsonData[4].user.id, '\"user.id\" must be 10').to.eql(10);\r",
									"    pm.expect(jsonData[4].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[5] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[5]).to.have.property('id');\r",
									"    pm.expect(jsonData[5]).to.have.property('user');\r",
									"    pm.expect(jsonData[5]).to.have.property('event');\r",
									"\r",
									"    pm.expect(jsonData[5].id, '\"id\" must be 10').to.eql(10);\r",
									"    pm.expect(jsonData[5].user.id, '\"user.id\" must be 11').to.eql(11);\r",
									"    pm.expect(jsonData[5].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId?queryType=POSITIVE&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "queryType",
									"value": "POSITIVE"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserLikes LIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[0] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0]).to.have.property('grade');\r",
									"\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 11').to.eql(11);\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"    pm.expect(jsonData[0].grade, '\"grade\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/likes/users/:userId?queryType=POSITIVE&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "queryType",
									"value": "POSITIVE"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserLikes DISLIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[0] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0]).to.have.property('grade');\r",
									"\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 4').to.eql(4);\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\" must be 5').to.eql(5);\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[0].grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/likes/users/:userId?queryType=NEGATIVE&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "queryType",
									"value": "NEGATIVE"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventLikes DISLIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[0] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0]).to.have.property('grade');\r",
									"\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[0].grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[1] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1]).to.have.property('grade');\r",
									"\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 4').to.eql(4);\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\" must be 5').to.eql(5);\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[1].grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[2] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2]).to.have.property('user');\r",
									"    pm.expect(jsonData[2]).to.have.property('event');\r",
									"    pm.expect(jsonData[2]).to.have.property('grade');\r",
									"\r",
									"    pm.expect(jsonData[2].id, '\"id\" must be 5').to.eql(5);\r",
									"    pm.expect(jsonData[2].user.id, '\"user.id\" must be 6').to.eql(6);\r",
									"    pm.expect(jsonData[2].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[2].grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});\r",
									"\r",
									"pm.test(\"Test like[3] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3]).to.have.property('id');\r",
									"    pm.expect(jsonData[3]).to.have.property('user');\r",
									"    pm.expect(jsonData[3]).to.have.property('event');\r",
									"    pm.expect(jsonData[3]).to.have.property('grade');\r",
									"\r",
									"    pm.expect(jsonData[3].id, '\"id\" must be 6').to.eql(6);\r",
									"    pm.expect(jsonData[3].user.id, '\"user.id\" must be 7').to.eql(7);\r",
									"    pm.expect(jsonData[3].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[3].grade, '\"grade\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId?queryType=NEGATIVE&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "queryType",
									"value": "NEGATIVE"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent grade=DISLIKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 7').to.eql(7);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 8').to.eql(8);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"DISLIKE').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "DISLIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "evaluateEvent grade=LIKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has like create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test like 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test like 'grade' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.grade, '\"grade\" must be \"LIKE').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/likes/event/:eventId/users/:userId?grade=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"likes",
								"event",
								":eventId",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "grade",
									"value": "LIKE"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ranking",
			"item": [
				{
					"name": "getEventRanking list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has rank create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test rank[0] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0]).to.have.property('likes');\r",
									"    pm.expect(jsonData[0]).to.have.property('positive');\r",
									"\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\" must be 1').to.eql(1);\r",
									"    pm.expect(jsonData[0].likes, '\"likes\" must be 10').to.eql(10);\r",
									"    pm.expect(jsonData[0].positive, '\"positive\" must be 6').to.eql(6);\r",
									"});\r",
									"\r",
									"pm.test(\"Test rank[1] fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1]).to.have.property('likes');\r",
									"    pm.expect(jsonData[1]).to.have.property('positive');\r",
									"\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"    pm.expect(jsonData[1].likes, '\"likes\" must be 9').to.eql(9);\r",
									"    pm.expect(jsonData[1].positive, '\"positive\" must be 5').to.eql(5);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ranking/event?sort=RATING&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ranking",
								"event"
							],
							"query": [
								{
									"key": "sort",
									"value": "RATING"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventRanking by eventId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"Has rank create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test rank fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData).to.have.property('likes');\r",
									"    pm.expect(jsonData).to.have.property('positive');\r",
									"\r",
									"    pm.expect(jsonData.event.id, '\"event.id\" must be 2').to.eql(2);\r",
									"    pm.expect(jsonData.likes, '\"likes\" must be 9').to.eql(9);\r",
									"    pm.expect(jsonData.positive, '\"positive\" must be 5').to.eql(5);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ranking/event/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ranking",
								"event",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "response",
			"value": ""
		}
	]
}